import asyncio
import sys
import logging
import json
import time
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from playwright.async_api import async_playwright, Browser, BrowserContext, Page, TimeoutError
from dataclasses import dataclass, field

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        datefmt=date_format,
        handlers=[
            logging.FileHandler('logs/facebook_scraper.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫—É–∫–∏
    cookie_logger = logging.getLogger('cookies')
    cookie_handler = logging.FileHandler('logs/cookies.log', encoding='utf-8')
    cookie_handler.setFormatter(logging.Formatter(log_format, date_format))
    cookie_logger.addHandler(cookie_handler)
    cookie_logger.setLevel(logging.INFO)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    scraper_logger = logging.getLogger('scraper')
    scraper_handler = logging.FileHandler('logs/scraper_activity.log', encoding='utf-8')
    scraper_handler.setFormatter(logging.Formatter(log_format, date_format))
    scraper_logger.addHandler(scraper_handler)
    scraper_logger.setLevel(logging.INFO)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
    error_logger = logging.getLogger('errors')
    error_handler = logging.FileHandler('logs/errors.log', encoding='utf-8')
    error_handler.setFormatter(logging.Formatter(log_format, date_format))
    error_logger.addHandler(error_handler)
    error_logger.setLevel(logging.ERROR)
    
    return {
        'main': logging.getLogger(__name__),
        'cookies': cookie_logger,
        'scraper': scraper_logger,
        'errors': error_logger
    }
class InteractiveDialog:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    @staticmethod
    def print_header():
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("\n" + "="*60)
        print("üöÄ FACEBOOK SCRAPER - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("="*60)
    
    @staticmethod
    def get_scraping_mode() -> str:
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print("1. –ü–∞—Ä—Å–∏—Ç—å –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç")
        print("2. –ü–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("3. –ü–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        while True:
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-3): ").strip()
                if choice == "1":
                    return "single_post"
                elif choice == "2":
                    return "group_page"
                elif choice == "3":
                    return "news_feed"
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
    
    @staticmethod
    def get_url_input(mode: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if mode == "single_post":
            print("\nüîó –í–≤–µ–¥–∏—Ç–µ URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ Facebook:")
            print("–ü—Ä–∏–º–µ—Ä: https://www.facebook.com/username/posts/123456789")
        elif mode == "group_page":
            print("\nüîó –í–≤–µ–¥–∏—Ç–µ URL –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Facebook:")
            print("–ü—Ä–∏–º–µ—Ä: https://www.facebook.com/groups/groupname")
        else:  # news_feed
            print("\nüîó –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL")
            return "https://www.facebook.com"
        
        while True:
            try:
                url = input("URL: ").strip()
                if url and ("facebook.com" in url or "fb.com" in url):
                    return url
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL Facebook")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
    
    @staticmethod
    def get_posts_count(mode: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if mode == "single_post":
            return 1
        
        print(f"\nüìä –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å?")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        print("‚Ä¢ 1-5 –ø–æ—Å—Ç–æ–≤ - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
        print("‚Ä¢ 10-20 –ø–æ—Å—Ç–æ–≤ - —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º")
        print("‚Ä¢ 50+ –ø–æ—Å—Ç–æ–≤ - –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
        
        while True:
            try:
                count = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö): ").strip()
                
                if count.lower() == 'all':
                    return -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ –ø–æ—Å—Ç—ã"
                
                count_int = int(count)
                if count_int > 0:
                    if count_int > 100:
                        confirm = input(f"‚ö†Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å {count_int} –ø–æ—Å—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
                        if confirm.lower() not in ['y', 'yes', '–¥–∞', '–¥']:
                            continue
                    return count_int
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
    
    @staticmethod
    def get_comments_settings() -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        print("\nüí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
        
        # –ü–∞—Ä—Å–∏—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        parse_comments = InteractiveDialog.yes_no_question(
            "–ü–∞—Ä—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º?", 
            default=True
        )
        
        if not parse_comments:
            return {"parse_comments": False}
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –ø–æ—Å—Ç
        print("\nüìù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –ø–æ—Å—Ç:")
        print("‚Ä¢ 10-20 - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        print("‚Ä¢ 50-100 - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä")
        print("‚Ä¢ 'all' - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        
        while True:
            try:
                max_comments = input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ('all' –¥–ª—è –≤—Å–µ—Ö): ").strip()
                
                if max_comments.lower() == 'all':
                    max_comments_int = -1
                    break
                
                max_comments_int = int(max_comments)
                if max_comments_int > 0:
                    break
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
        
        # –ü–∞—Ä—Å–∏—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        parse_replies = InteractiveDialog.yes_no_question(
            "–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏? (–º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è)", 
            default=False
        )
        
        return {
            "parse_comments": True,
            "max_comments": max_comments_int,
            "parse_replies": parse_replies
        }
    
    @staticmethod
    def get_delay_settings() -> Dict[str, int]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫"""
        print("\n‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏):")
        print("1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ (–±—ã—Å—Ç—Ä–æ, –Ω–æ —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)")
        print("2. –£–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ (–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)")
        print("4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        while True:
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-4): ").strip()
                
                if choice == "1":
                    return {"post_delay": 2, "comment_delay": 1, "scroll_delay": 1}
                elif choice == "2":
                    return {"post_delay": 5, "comment_delay": 2, "scroll_delay": 2}
                elif choice == "3":
                    return {"post_delay": 10, "comment_delay": 5, "scroll_delay": 3}
                elif choice == "4":
                    return InteractiveDialog.get_custom_delays()
                else:
                    print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ 4")
                    
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
    
    @staticmethod
    def get_custom_delays() -> Dict[str, int]:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫"""
        delays = {}
        
        delay_params = [
            ("post_delay", "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (—Å–µ–∫)", 5),
            ("comment_delay", "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (—Å–µ–∫)", 2),
            ("scroll_delay", "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (—Å–µ–∫)", 2)
        ]
        
        for param, description, default in delay_params:
            while True:
                try:
                    value = input(f"{description} [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default}]: ").strip()
                    if not value:
                        delays[param] = default
                        break
                    
                    value_int = int(value)
                    if value_int >= 0:
                        delays[param] = value_int
                        break
                    else:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
                        
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                except KeyboardInterrupt:
                    print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                    sys.exit(0)
        
        return delays
    
    @staticmethod
    def get_output_settings() -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\nüíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –ò–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"facebook_scraping_{timestamp}.json"
        
        filename = input(f"–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_filename}]: ").strip()
        if not filename:
            filename = default_filename
        
        if not filename.endswith('.json'):
            filename += '.json'
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        save_csv = InteractiveDialog.yes_no_question(
            "–¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ?", 
            default=False
        )
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤:")
        print("1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è)")
        print("2. –°—Ä–µ–¥–Ω–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("3. –ü–æ–¥—Ä–æ–±–Ω—ã–π (–≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è)")
        
        while True:
            try:
                log_level = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (1-3) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2]: ").strip()
                if not log_level:
                    log_level = "2"
                
                if log_level in ["1", "2", "3"]:
                    log_levels = {"1": "WARNING", "2": "INFO", "3": "DEBUG"}
                    break
                else:
                    print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
                    
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
        
        return {
            "filename": filename,
            "save_csv": save_csv,
            "log_level": log_levels[log_level]
        }
    
    @staticmethod
    def yes_no_question(question: str, default: bool = True) -> bool:
        """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º –¥–∞/–Ω–µ—Ç"""
        default_text = "Y/n" if default else "y/N"
        
        while True:
            try:
                answer = input(f"{question} ({default_text}): ").strip().lower()
                
                if not answer:
                    return default
                
                if answer in ['y', 'yes', '–¥–∞', '–¥']:
                    return True
                elif answer in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                    return False
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' (–¥–∞) –∏–ª–∏ 'n' (–Ω–µ—Ç)")
                    
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
    
    @staticmethod
    def get_authentication_settings() -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–∞ –≤ Facebook:")
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Facebook")
        print("(–¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)")
        
        while True:
            try:
                email = input("\nEmail –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip()
                if email:
                    break
                print("‚ùå Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
        
        while True:
            try:
                import getpass
                password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
                if password:
                    break
                print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
        
        return {"email": email, "password": password}
    
    @staticmethod
    def show_summary(config: Dict[str, Any]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("\n" + "="*60)
        print("üìã –°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ï–ö")
        print("="*60)
        
        print(f"üéØ –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: {config['mode']}")
        print(f"üîó URL: {config['url']}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {config['posts_count'] if config['posts_count'] != -1 else '–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ'}")
        
        if config['comments']['parse_comments']:
            max_comments = config['comments']['max_comments']
            print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –î–∞ (–º–∞–∫—Å. {max_comments if max_comments != -1 else '–≤—Å–µ'})")
            print(f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {'–î–∞' if config['comments']['parse_replies'] else '–ù–µ—Ç'}")
        else:
            print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –ù–µ—Ç")
        
        print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∏: {config['delays']['post_delay']}—Å –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏")
        print(f"üíæ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {config['output']['filename']}")
        print(f"üìÑ CSV —ç–∫—Å–ø–æ—Ä—Ç: {'–î–∞' if config['output']['save_csv'] else '–ù–µ—Ç'}")
        
        print("\n" + "="*60)
        
        if not InteractiveDialog.yes_no_question("–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?", default=True):
            print("üëã –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)

def get_interactive_config() -> Dict[str, Any]:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
    InteractiveDialog.print_header()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mode = InteractiveDialog.get_scraping_mode()
    url = InteractiveDialog.get_url_input(mode)
    posts_count = InteractiveDialog.get_posts_count(mode)
    comments = InteractiveDialog.get_comments_settings()
    delays = InteractiveDialog.get_delay_settings()
    output = InteractiveDialog.get_output_settings()
    auth = InteractiveDialog.get_authentication_settings()
    
    config = {
        "mode": mode,
        "url": url,
        "posts_count": posts_count,
        "comments": comments,
        "delays": delays,
        "output": output,
        "auth": auth
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    InteractiveDialog.show_summary(config)
    
    return config

@dataclass
class Comment:
    author: str
    text: str
    timestamp: str
    likes: int = 0
    replies: List['Comment'] = field(default_factory=list)

@dataclass
class Post:
    author: str
    text: str
    timestamp: str
    likes: int = 0
    comments_count: int = 0
    shares: int = 0
    reactions: Dict[str, int] = field(default_factory=dict)
    comments: List[Comment] = field(default_factory=list)

class CookieManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∏"""
    
    def __init__(self, cookies_file: str = "facebook_cookies.json"):
        self.cookies_file = cookies_file
        self.logger = logging.getLogger('cookies')
        
    async def save_cookies(self, context: BrowserContext) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            cookies = await context.cookies()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cookies_dir = os.path.dirname(self.cookies_file) if os.path.dirname(self.cookies_file) else '.'
            if not os.path.exists(cookies_dir):
                os.makedirs(cookies_dir)
            
            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                json.dump(cookies, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {self.cookies_file} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(cookies)})")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            important_cookies = [cookie for cookie in cookies if cookie['name'] in ['c_user', 'xs', 'sb', 'datr']]
            for cookie in important_cookies:
                self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫—É–∫–∏: {cookie['name']} –¥–ª—è –¥–æ–º–µ–Ω–∞ {cookie['domain']}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–∫–∏: {e}")
            return False
    
    async def load_cookies(self, context: BrowserContext) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.cookies_file):
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies = json.load(f)
            
            if not cookies:
                self.logger.warning("‚ö†Ô∏è –§–∞–π–ª –∫—É–∫–∏ –ø—É—Å—Ç")
                return False
            
            await context.add_cookies(cookies)
            self.logger.info(f"‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {self.cookies_file} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(cookies)})")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            important_cookies = [cookie for cookie in cookies if cookie['name'] in ['c_user', 'xs', 'sb', 'datr']]
            for cookie in important_cookies:
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫—É–∫–∏: {cookie['name']} –¥–ª—è –¥–æ–º–µ–Ω–∞ {cookie['domain']}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–∫–∏: {e}")
            return False
    
    def cookies_exist(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫—É–∫–∏"""
        exists = os.path.exists(self.cookies_file)
        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–∏ —Ñ–∞–π–ª–∞ {self.cookies_file}: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        return exists
    
    async def validate_cookies(self, page: Page) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Facebook"""
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–∫–∏...")
            
            await page.goto('https://www.facebook.com', wait_until='networkidle')
            await page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã
            login_indicators = [
                'input[name="email"]',  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ email –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
                'input[data-testid="royal_email"]'  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
            ]
            
            is_logged_out = False
            for indicator in login_indicators:
                if await page.query_selector(indicator):
                    is_logged_out = True
                    break
            
            if is_logged_out:
                self.logger.warning("‚ö†Ô∏è –ö—É–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return False
            else:
                self.logger.info("‚úÖ –ö—É–∫–∏ –≤–∞–ª–∏–¥–Ω—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–∏: {e}")
            return False

class FacebookDOMAnalyzer:
    def __init__(self):
        self.logger = logging.getLogger('scraper')
    
    async def get_selectors(self, selector_type: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Facebook"""
        selectors = {
            'post': {
                'container': '[data-pagelet="FeedUnit_0"], [role="article"], div[data-testid="fbfeed_story"]',
                'author': '[data-testid="story-subtitle"] a, [data-ad-comet-preview="message"] a',
                'content': '[data-testid="post_message"], [data-ad-comet-preview="message"]',
                'timestamp': 'abbr[data-utime], time',
                'likes': '[aria-label*="reactions"], [aria-label*="–ª–∞–π–∫"]',
                'comments': '[aria-label*="comment"], [aria-label*="–∫–æ–º–º–µ–Ω—Ç"]',
                'shares': '[aria-label*="share"], [aria-label*="–ø–æ–¥–µ–ª–∏–ª"]'
            },
            'comment': {
                'container': '[role="article"], div[aria-label*="Comment"], div[data-testid="UFI2Comment/root"]',
                'author': 'strong a, [data-testid="UFI2CommentActorName"] a, h3 a',
                'text': '[data-testid="UFI2CommentBodyText"], div[dir="auto"]:not([role="button"])',
                'timestamp': 'abbr, time, a[role="link"][tabindex="0"]',
                'likes': '[aria-label*="reactions"], button[aria-label*="–ª–∞–π–∫"], [aria-label*="Like"]',
                'replies': '[aria-label*="replies"], [aria-label*="–æ—Ç–≤–µ—Ç"]'
            },
            'modal': {
                'container': '[role="dialog"], div[aria-modal="true"]',
                'close': '[aria-label="Close"], button[aria-label="–ó–∞–∫—Ä—ã—Ç—å"], [aria-label*="close"]',
                'comments_section': '[aria-label*="Comments"], div[data-testid="UFI2CommentsCount"]',
                'content': '[role="dialog"] [data-testid="post_message"], div[aria-modal="true"] [data-ad-comet-preview="message"]'
            }
        }
        return selectors.get(selector_type, {})

    async def analyze_modal(self, page: Page) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º"""
        try:
            print(f"\033[94müîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...\033[0m")
            self.logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω Facebook
            modal_selectors = [
                '[role="dialog"]',
                'div[aria-modal="true"]',
                'div[data-testid="modal-dialog"]',
                'div[aria-labelledby*="modal"]',
                'div[class*="modal"]',
                'div[style*="position: fixed"]',
                'div[style*="z-index"]',
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Facebook
                'div[data-testid="photo-viewer"]',
                'div[data-testid="media-viewer"]',
                'div[data-testid="post-modal"]'
            ]
            
            modal_element = None
            used_selector = None
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            for selector in modal_selectors:
                try:
                    element = await page.query_selector(selector)
                    if element:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏–º –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
                        is_visible = await element.is_visible()
                        if is_visible:
                            modal_element = element
                            used_selector = selector
                            print(f"\033[92m‚úì –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}\033[0m")
                            self.logger.info(f"‚úì –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                            break
                        else:
                            print(f"\033[93m‚ö† –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –≤–∏–¥–∏–º: {selector}\033[0m")
                except Exception as e:
                    print(f"\033[91m‚úó –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}\033[0m")
                    continue
            
            if not modal_element:
                print(f"\033[91m‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\033[0m")
                self.logger.info("‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º URL
                current_url = page.url
                print(f"\033[94m–¢–µ–∫—É—â–∏–π URL: {current_url}\033[0m")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ URL
                modal_url_indicators = ['/photo/', '/video/', '/posts/', '?story_fbid=', 'permalink']
                url_suggests_modal = any(indicator in current_url for indicator in modal_url_indicators)
                
                if url_suggests_modal:
                    print(f"\033[93m‚ö† URL –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\033[0m")
                    self.logger.warning("URL –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                return {
                    "is_modal": False, 
                    "type": None,
                    "url_suggests_modal": url_suggests_modal,
                    "current_url": current_url
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal_type = "unknown"
            modal_features = []
            
            # –ü–æ–ª—É—á–∞–µ–º HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                modal_html = await modal_element.inner_html()
                modal_text = await modal_element.inner_text()
                
                print(f"\033[96m–†–∞–∑–º–µ—Ä HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {len(modal_html)} —Å–∏–º–≤–æ–ª–æ–≤\033[0m")
                print(f"\033[96m–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {len(modal_text)} —Å–∏–º–≤–æ–ª–æ–≤\033[0m")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                preview_text = modal_text[:200].replace('\n', ' ').strip()
                print(f"\033[96m–ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞: {preview_text}...\033[0m")
                
            except Exception as e:
                print(f"\033[91m–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}\033[0m")
                modal_html = ""
                modal_text = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            type_indicators = {
                'comments': [
                    '[aria-label*="Comments"]',
                    'div[data-testid="UFI2CommentsCount"]',
                    'h2:has-text("Comments")',
                    'h2:has-text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")',
                    '[data-testid="UFI2Comment/root"]',
                    'div[role="textbox"][aria-label*="comment"]',
                    'span:has-text("Write a comment")',
                    'span:has-text("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")'
                ],
                'media': [
                    'img[data-testid="photo"]',
                    'video',
                    '[aria-label*="Photo"]',
                    '[aria-label*="Video"]',
                    'div[data-testid="media-viewer"]',
                    'div[data-testid="photo-viewer"]',
                    'img[style*="max-width"]'
                ],
                'post': [
                    '[data-testid="post_message"]',
                    'div[data-ad-comet-preview="message"]',
                    '[data-testid="story-subtitle"]',
                    'div[role="article"]'
                ]
            }
            
            detected_types = []
            
            for type_name, selectors in type_indicators.items():
                type_found = False
                found_selectors = []
                
                for selector in selectors:
                    try:
                        elements = await modal_element.query_selector_all(selector)
                        if elements:
                            visible_elements = []
                            for elem in elements:
                                if await elem.is_visible():
                                    visible_elements.append(elem)
                            
                            if visible_elements:
                                type_found = True
                                found_selectors.append(f"{selector} ({len(visible_elements)})")
                    except Exception as e:
                        continue
                
                if type_found:
                    detected_types.append(type_name)
                    modal_features.extend(found_selectors)
                    print(f"\033[92m‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø '{type_name}': {', '.join(found_selectors)}\033[0m")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø
            if detected_types:
                modal_type = '_'.join(detected_types)
            else:
                modal_type = "unknown"
                print(f"\033[93m‚ö† –¢–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\033[0m")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                close_selectors = [
                    '[aria-label="Close"]',
                    'button[aria-label="–ó–∞–∫—Ä—ã—Ç—å"]',
                    '[aria-label*="close"]',
                    'div[role="button"][aria-label*="Close"]',
                    'svg[aria-label="Close"]'
                ]
                
                close_button_found = False
                for selector in close_selectors:
                    if await modal_element.query_selector(selector):
                        close_button_found = True
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                bounding_box = await modal_element.bounding_box()
                modal_size = None
                if bounding_box:
                    modal_size = {
                        'width': bounding_box['width'],
                        'height': bounding_box['height'],
                        'x': bounding_box['x'],
                        'y': bounding_box['y']
                    }
                    print(f"\033[96m–†–∞–∑–º–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {modal_size['width']}x{modal_size['height']}\033[0m")
                
            except Exception as e:
                print(f"\033[91m–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö: {e}\033[0m")
                close_button_found = False
                modal_size = None
            
            result = {
                "is_modal": True,
                "type": modal_type,
                "detected_types": detected_types,
                "features": modal_features,
                "has_comments": 'comments' in detected_types,
                "has_media": 'media' in detected_types,
                "has_close_button": close_button_found,
                "modal_element": modal_element,
                "selector_used": used_selector,
                "size": modal_size,
                "current_url": page.url,
                "text_preview": preview_text if 'preview_text' in locals() else ""
            }
            
            print(f"\033[92m‚úÖ –ê–Ω–∞–ª–∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\033[0m")
            print(f"\033[96m–¢–∏–ø: {modal_type}\033[0m")
            print(f"\033[96m–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(detected_types)}\033[0m")
            print(f"\033[96m–ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {'–î–∞' if result['has_comments'] else '–ù–µ—Ç'}\033[0m")
            
            self.logger.info(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–∏–ø–∞: {modal_type}")
            
            return result
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}"
            self.logger.error(error_msg)
            print(f"\033[91m{error_msg}\033[0m")
            logging.getLogger('errors').error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            return {
                "is_modal": False, 
                "type": None, 
                "error": str(e),
                "current_url": page.url if page else "unknown"
            }

class FacebookScraper:
    def __init__(self, headless: bool = True, cookies_file: str = "cookies.json"):
        self.headless = headless
        self.browser: Optional[Browser] = None
        self.context: Optional[BrowserContext] = None
        self.page: Optional[Page] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.loggers = setup_logging()
        self.logger = self.loggers['main']
        self.scraper_logger = self.loggers['scraper']
        self.error_logger = self.loggers['errors']
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.cookie_manager = CookieManager(cookies_file)
        self.dom_analyzer = FacebookDOMAnalyzer()
        
        self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FacebookScraper")

    async def start_browser(self):
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
        try:
            self.logger.info("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(
                headless=self.headless,
                args=[
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor'
                ]
            )
            
            self.context = await self.browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            )
            
            self.page = await self.context.new_page()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏
            if self.cookie_manager.cookies_exist():
                if await self.cookie_manager.load_cookies(self.context):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–∫–∏
                    if await self.cookie_manager.validate_cookies(self.page):
                        self.logger.info("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫—É–∫–∏")
                        return True
                    else:
                        self.logger.warning("‚ö†Ô∏è –ö—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            
            self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            self.error_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            raise

    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            if self.context:
                await self.cookie_manager.save_cookies(self.context)
            
            if self.page:
                await self.page.close()
            if self.context:
                await self.context.close()
            if self.browser:
                await self.browser.close()
            if hasattr(self, 'playwright'):
                await self.playwright.stop()
                
            self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    async def login(self, email: str, password: str) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Facebook —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ (—Ä—É—á–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—Ö–æ–¥–∞)"""
        try:
            self.logger.info(f"üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {email}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Facebook
            await self.page.goto('https://www.facebook.com', wait_until='networkidle')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã —É–∂–µ
            email_field = await self.page.query_selector('input[name="email"]')
            if not email_field:
                self.logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è, –Ω–æ –Ω–µ –∫–ª–∏–∫–∞–µ–º —Å–∞–º–∏)
            self.logger.info("üìù –í–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            await self.page.fill('input[name="email"]', email)
            await self.page.fill('input[name="pass"]', password)

            print("\n=========================================")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Ö–æ–¥ –≤ Facebook –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ.")
            print("–ï—Å–ª–∏ Facebook –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞–ø—á–∏ ‚Äî –≤—Å—ë —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é.")
            print("–í–∞–º –Ω—É–∂–Ω–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–í—Ö–æ–¥'!")
            input("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç—ã –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            print("=========================================\n")

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –ª–µ–Ω—Ç—ã –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            await self.page.wait_for_timeout(3000)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            is_logged_in = False

            # 1. –ù–µ—Ç –ø–æ–ª—è email ‚Äì –∑–Ω–∞—á–∏—Ç, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            email_field = await self.page.query_selector('input[name="email"]')
            if email_field is None:
                is_logged_in = True

            # 2. –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            account_elem = await self.page.query_selector('[aria-label*="Account"]')
            blue_bar = await self.page.query_selector('[data-testid="blue_bar"]')
            if account_elem is not None or blue_bar is not None:
                is_logged_in = True

            if is_logged_in and 'facebook.com' in self.page.url and 'login' not in self.page.url:
                self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                self.scraper_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                await self.cookie_manager.save_cookies(self.context)
                return True
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                self.error_logger.error(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {email}")
                return False

        except Exception as e:
            self.error_logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {email}: {e}")
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def scrape_group_posts(self, url: str, posts_count: int, delays: Dict[str, int], comments_settings: Dict[str, Any]) -> List[Dict[str, Any]]:
        self.scraper_logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        await self.page.goto(url, wait_until='domcontentloaded')
        await self.page.wait_for_selector('body')

        posts_data = []
        scraped_posts_count = 0

        while scraped_posts_count < posts_count or posts_count == -1:
            try:
                await self.page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
                await asyncio.sleep(delays['scroll_delay'])

                posts = await self.page.query_selector_all('div[role="article"]')
                self.scraper_logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")

                for post_element in posts:
                    if scraped_posts_count >= posts_count and posts_count != -1:
                        break

                    try:
                        author_element = await post_element.query_selector('h3 a')
                        author = await author_element.text_content() if author_element else 'N/A'

                        timestamp_element = await post_element.query_selector('abbr') or await post_element.query_selector('a[href*="fbid"] time')
                        timestamp = await timestamp_element.get_attribute('title') if timestamp_element else 'N/A'

                        text_content_element = await post_element.query_selector('div[data-ad-preview="message"]')
                        text_content = await text_content_element.text_content() if text_content_element else 'N/A'

                        likes_element = await post_element.query_selector('span[aria-label*="–ù—Ä–∞–≤–∏—Ç—Å—è"]')
                        likes = int(''.join(filter(str.isdigit, await likes_element.text_content()))) if likes_element else 0

                        comments_list = []
                        if comments_settings['parse_comments']:
                            try:
                                comments_button = await post_element.query_selector('div[role="button"]:has-text("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏")')
                                if comments_button:
                                    await comments_button.click()
                                    await self.page.wait_for_timeout(delays['comment_delay'] * 1000)

                                comment_elements = await post_element.query_selector_all('div[aria-label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]')
                                for comment_element in comment_elements:
                                    if comments_settings['max_comments'] != -1 and len(comments_list) >= comments_settings['max_comments']:
                                        break

                                    comment_author_element = await comment_element.query_selector('h3 a')
                                    comment_author = await comment_author_element.text_content() if comment_author_element else 'N/A'

                                    comment_text_element = await comment_element.query_selector('div[data-testid="comment-content"]')
                                    comment_text = await comment_text_element.text_content() if comment_text_element else 'N/A'

                                    comment_timestamp_element = await comment_element.query_selector('abbr')
                                    comment_timestamp = await comment_timestamp_element.get_attribute('title') if comment_timestamp_element else 'N/A'

                                    comments_list.append({
                                        'author': comment_author,
                                        'text': comment_text,
                                        'timestamp': comment_timestamp
                                    })
                                    
                            except Exception as e:
                                self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")

                        post_data = {
                            'author': author,
                            'text': text_content,
                            'timestamp': timestamp,
                            'likes': likes,
                            'comments': comments_list
                        }
                        posts_data.append(post_data)
                        scraped_posts_count += 1
                        self.scraper_logger.info(f"–°–ø–∞—Ä—Å–µ–Ω –ø–æ—Å—Ç –æ—Ç {author}. –í—Å–µ–≥–æ: {scraped_posts_count}")
                        await asyncio.sleep(delays['post_delay'])

                    except Exception as e:
                        self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç–∞: {e}")

                if posts_count != -1 and scraped_posts_count >= posts_count:
                    break

            except Exception as e:
                self.error_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                break
        
        self.scraper_logger.info(f"–ó–∞–≤–µ—Ä—à–∏–ª–∏. –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤.")
        return posts_data
        
        html_debug = await post_element.inner_html()
        with open(f"debug_post_{scraped_posts_count}.html", "w", encoding="utf-8") as f:
            f.write(html_debug)

        print(f"\u001b[93m[Debug] –°–æ—Ö—Ä–∞–Ω–∏–ª HTML –ø–æ—Å—Ç–∞ {scraped_posts_count} –≤ debug_post_{scraped_posts_count}.html\u001b[0m")
    
    async def extract_full_comments(self, page: Page, modal: bool = False) -> List[Comment]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        comments = []
        try:
            self.scraper_logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ({'–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ' if modal else '—Å—Ç—Ä–∞–Ω–∏—Ü–∞'})")
            print(f"\033[94m–ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({'–≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ' if modal else '–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'})...\033[0m")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comment_container_selectors = [
                '[data-testid="UFI2Comment/root"]',
                '[role="article"]',
                'div[aria-label*="Comment"]',
                'div[data-testid*="comment"]',
                'div[data-ad-comet-preview*="comment"]',
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'div[data-testid="story-subtitle"]',
                'div[data-testid="post_message"]',
                'div[dir="auto"]:has(strong)',
                'div:has(> div > div > strong)',
                'div:has(span[dir="auto"])'
            ]
            
            all_containers = []
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            for selector in comment_container_selectors:
                try:
                    if modal:
                        containers = await page.query_selector_all(f'[role="dialog"] {selector}, div[aria-modal="true"] {selector}')
                    else:
                        containers = await page.query_selector_all(selector)
                    
                    if containers:
                        all_containers.extend(containers)
                        print(f"\033[93m–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–∞—à–µ–ª {len(containers)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\033[0m")
                        self.scraper_logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–∞—à–µ–ª {len(containers)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                except Exception as e:
                    print(f"\033[91m–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º '{selector}': {e}\033[0m")
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_containers = []
            seen_elements = set()
            
            for container in all_containers:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º innerHTML –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    html_content = await container.inner_html()
                    html_hash = hash(html_content[:200])  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                    
                    if html_hash not in seen_elements:
                        seen_elements.add(html_hash)
                        unique_containers.append(container)
                except:
                    continue
            
            print(f"\033[92m–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(unique_containers)}\033[0m")
            self.scraper_logger.info(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(unique_containers)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            for i, container in enumerate(unique_containers):
                try:
                    print(f"\033[94m–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {i+1}/{len(unique_containers)}\033[0m")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    container_html = await container.inner_html()
                    container_text = await container.inner_text()
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    print(f"\033[93m–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(container_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞\033[0m")
                    
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∏—à–∫–æ–º –º–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if len(container_text.strip()) < 10:
                        print(f"\033[91m–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {i+1} —Å–ª–∏—à–∫–æ–º –º–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\033[0m")
                        continue
                    
                    # –ò—â–µ–º –∞–≤—Ç–æ—Ä–∞ –±–æ–ª–µ–µ –≥–∏–±–∫–æ
                    author = await self.extract_author_from_container(container)
                    
                    # –ò—â–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ
                    comment_text = await self.extract_text_from_container(container)
                    
                    # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    timestamp = await self.extract_timestamp_from_container(container)
                    
                    # –ò—â–µ–º –ª–∞–π–∫–∏
                    likes = await self.extract_likes_from_container(container)
                    
                    print(f"\033[96m–ê–≤—Ç–æ—Ä: {author[:50]}...\033[0m")
                    print(f"\033[96m–¢–µ–∫—Å—Ç: {comment_text[:100]}...\033[0m")
                    print(f"\033[96m–í—Ä–µ–º—è: {timestamp}\033[0m")
                    print(f"\033[96m–õ–∞–π–∫–∏: {likes}\033[0m")
                    print("-" * 50)
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    if comment_text.strip() and len(comment_text.strip()) > 5:
                        comment = Comment(
                            author=author or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
                            text=comment_text.strip(),
                            timestamp=timestamp or "",
                            likes=likes
                        )
                        comments.append(comment)
                        
                        self.scraper_logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {author}: {comment_text[:50]}...")
                        print(f"\033[92m‚úì –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {author}\033[0m")
                    else:
                        print(f"\033[91m‚úó –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {i+1} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\033[0m")
                    
                except Exception as e:
                    self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {i+1}: {e}")
                    print(f"\033[91m–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {i+1}: {e}\033[0m")
                    continue
            
            self.scraper_logger.info(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
            print(f"\033[92m–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}\033[0m")
            
        except Exception as e:
            self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            print(f"\033[91m–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}\033[0m")
        
        return comments
    async def extract_author_from_container(self, container) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        author_selectors = [
            'strong:first-child',
            'strong',
            'h3 a',
            'a[role="link"]',
            'span[dir="auto"] strong',
            'div[data-testid*="actor"] a',
            'div[data-testid*="name"] a',
            'a[href*="/user/"]',
            'a[href*="/profile.php"]',
            'a:first-child',
            'span:first-child strong'
        ]
        
        for selector in author_selectors:
            try:
                author_element = await container.query_selector(selector)
                if author_element:
                    author_text = await author_element.inner_text()
                    if author_text and len(author_text.strip()) > 0:
                        return author_text.strip()
            except:
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        try:
            all_text = await container.inner_text()
            lines = all_text.split('\n')
            for line in lines[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                if line.strip() and len(line.strip()) < 100:  # –ò–º—è –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ
                    return line.strip()
        except:
            pass
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

    async def extract_text_from_container(self, container) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        text_selectors = [
            'div[data-testid="UFI2CommentBodyText"]',
            'div[dir="auto"]:not([role="button"]):not(:has(strong:first-child))',
            'span[dir="auto"]:not(:has(strong))',
            'div[data-ad-comet-preview="message"]',
            'div[data-testid="post_message"]',
            'div:not([role="button"]):not([data-testid*="button"])',
            'span:not([role="button"])'
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        for selector in text_selectors:
            try:
                text_elements = await container.query_selector_all(selector)
                for element in text_elements:
                    text = await element.inner_text()
                    if text and len(text.strip()) > 10:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        return text.strip()
            except:
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        try:
            all_text = await container.inner_text()
            lines = all_text.split('\n')
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            for line in lines:
                line = line.strip()
                if (len(line) > 10 and 
                    not line.isdigit() and  # –ù–µ —á–∏—Å–ª–æ
                    'like' not in line.lower() and 
                    'reply' not in line.lower() and
                    '—á–∞—Å' not in line.lower() and
                    '–º–∏–Ω' not in line.lower() and
                    'day' not in line.lower() and
                    'ago' not in line.lower()):
                    return line
        except:
            pass
        
        return ""

    async def extract_timestamp_from_container(self, container) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        timestamp_selectors = [
            'abbr[data-utime]',
            'time',
            'a[role="link"][tabindex="0"]',
            'span:contains("—á–∞—Å")',
            'span:contains("–º–∏–Ω")',
            'span:contains("ago")',
            'span:contains("day")'
        ]
        
        for selector in timestamp_selectors:
            try:
                timestamp_element = await container.query_selector(selector)
                if timestamp_element:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å data-utime
                    timestamp = await timestamp_element.get_attribute('data-utime')
                    if timestamp:
                        return timestamp
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç data-utime, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç
                    timestamp_text = await timestamp_element.inner_text()
                    if timestamp_text:
                        return timestamp_text.strip()
            except:
                continue
        
        # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
        try:
            all_text = await container.inner_text()
            import re
            time_patterns = [
                r'\d+\s*(—á–∞—Å|hours?|h)\s*–Ω–∞–∑–∞–¥',
                r'\d+\s*(–º–∏–Ω|minutes?|min|m)\s*–Ω–∞–∑–∞–¥',
                r'\d+\s*(day|days?|d)\s*ago',
                r'\d+[hm]',
                r'Yesterday',
                r'–í—á–µ—Ä–∞'
            ]
            
            for pattern in time_patterns:
                match = re.search(pattern, all_text, re.IGNORECASE)
                if match:
                    return match.group(0)
        except:
            pass
        
        return ""

    async def extract_likes_from_container(self, container) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        likes_selectors = [
            '[aria-label*="reaction"]',
            '[aria-label*="like"]',
            '[aria-label*="–ª–∞–π–∫"]',
            'button[aria-label*="Like"]',
            'span:contains("Like")',
            'span:contains("–ª–∞–π–∫")'
        ]
        
        for selector in likes_selectors:
            try:
                likes_element = await container.query_selector(selector)
                if likes_element:
                    aria_label = await likes_element.get_attribute('aria-label') or ""
                    
                    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ aria-label
                    import re
                    likes_match = re.search(r'(\d+)', aria_label)
                    if likes_match:
                        return int(likes_match.group(1))
            except:
                continue
        
        return 0
    async def click_view_more_comments(self, page: Page, max_attempts: int = 5) -> bool:
        """–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'"""
        attempts = 0
        clicked_any = False
        
        view_more_selectors = [
            'div[role="button"]:has-text("View more comments")',
            'div[role="button"]:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")',
            'div[role="button"]:has-text("See more")',
            'div[role="button"]:has-text("Reply")',
            'span:has-text("View more comments")',
            'span:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")',
            '[data-testid="UFI2CommentsCount/root"] div[role="button"]'
        ]
        
        while attempts < max_attempts:
            found_button = False
            
            for selector in view_more_selectors:
                try:
                    buttons = await page.query_selector_all(selector)
                    for button in buttons:
                        if await button.is_visible():
                            await button.click()
                            await page.wait_for_timeout(2000)
                            clicked_any = True
                            found_button = True
                            
                            self.scraper_logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'See more' (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1})")
                            print(f"\033[94m‚úì –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'See more' (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1})\033[0m")
                            break
                    if found_button:
                        break
                except Exception as e:
                    continue
            
            if not found_button:
                break
                
            attempts += 1
        
        return clicked_any

    async def scrape_post_comments(self, post_url: str) -> Dict[str, Any]:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ—Å—Ç—É"""
        try:
            self.scraper_logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø–æ—Å—Ç–∞: {post_url}")
            print(f"\033[96m=== –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å—Ç—É: {post_url} ===\033[0m")
            
            await self.page.goto(post_url)
            await self.page.wait_for_load_state('networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal_info = await self.dom_analyzer.analyze_modal(self.page)
            is_modal = modal_info.get('is_modal', False)
            
            print(f"\033[93m–†–µ–∂–∏–º: {'–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ' if is_modal else '–û–±—ã—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'}\033[0m")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            await self.click_view_more_comments(self.page)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            comments = await self.extract_full_comments(self.page, modal=is_modal)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            post_selectors = await self.dom_analyzer.get_selectors('post')
            
            author_element = await self.page.query_selector(post_selectors['author'])
            author = await author_element.inner_text() if author_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
            
            content_element = await self.page.query_selector(post_selectors['content'])
            content = await content_element.inner_text() if content_element else ""
            
            timestamp_element = await self.page.query_selector(post_selectors['timestamp'])
            timestamp = ""
            if timestamp_element:
                timestamp = await timestamp_element.get_attribute('data-utime') or await timestamp_element.inner_text()
            
            post = Post(
                author=author,
                text=content,
                timestamp=timestamp,
                comments=comments,
                comments_count=len(comments)
            )
            
            result = {
                'post': post,
                'url': post_url,
                'scraped_at': datetime.now().isoformat(),
                'total_comments': len(comments),
                'is_modal': is_modal
            }
            
            self.scraper_logger.info(f"–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. URL: {post_url}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
            print(f"\033[92m‚úì –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}\033[0m")
            
            return result
            
        except Exception as e:
            self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –ø–æ—Å—Ç–∞ {post_url}: {e}")
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –ø–æ—Å—Ç–∞ {post_url}: {e}")
            return {'error': str(e), 'url': post_url}

    async def save_results(self, results: Dict[str, Any], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"results/facebook_comments_{timestamp}.json"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            results_dir = os.path.dirname(filename) if os.path.dirname(filename) else '.'
            if not os.path.exists(results_dir):
                os.makedirs(results_dir)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dataclass –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
            serializable_results = self._make_serializable(results)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(serializable_results, f, ensure_ascii=False, indent=2)
            
            self.scraper_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            print(f"\033[92m‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}\033[0m")
            
        except Exception as e:
            self.error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def _make_serializable(self, obj):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, (Post, Comment)):
            return obj.__dict__
        elif isinstance(obj, dict):
            return {k: self._make_serializable(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._make_serializable(item) for item in obj]
        else:
            return obj

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        config = get_interactive_config()
        
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Facebook Scraper...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–∞–ø–µ—Ä–∞
        scraper = FacebookScraper(
            headless=False, 
            cookies_file="facebook_cookies.json"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.getLogger().setLevel(getattr(logging, config['output']['log_level']))
        
        await scraper.start_browser()
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        print("\nüîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ Facebook...")
        if not await scraper.login(config['auth']['email'], config['auth']['password']):
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if config['mode'] == 'single_post':
            print(f"\nüìÑ –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω –ø–æ—Å—Ç: {config['url']}")
            results = await scraper.scrape_post_comments(config['url'])
        else:
            print(f"\nüìö –ü–∞—Ä—Å–∏–º {config['posts_count']} –ø–æ—Å—Ç–æ–≤ –∏–∑: {config['url']}")
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            # results = await scraper.scrape_multiple_posts(config)
            results = await scraper.scrape_group_posts(
            url=config['url'],
            posts_count=config['posts_count'],
            delays=config['delays'],
            comments_settings=config['comments']
        )


        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {config['output']['filename']}...")
        await scraper.save_results(results, config['output']['filename'])
        
        if config['output']['save_csv']:
            print("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
            # –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
        
        print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.getLogger('errors').error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        sys.exit(1)
    finally:
        if 'scraper' in locals():
            await scraper.close_browser()

if __name__ == "__main__":
    asyncio.run(main())




